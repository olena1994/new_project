{"version":3,"sources":["components/UserForm/UserForm.tsx","components/UserInfo/UserInfo.tsx","components/UserList/UserList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserForm","users","addUser","useState","name","setName","surname","setSurname","email","setEmail","phone","setPhone","onSubmit","event","preventDefault","newUser","id","length","className","htmlFor","type","value","onChange","target","placeholder","required","UserInfo","selectedUser","UserList","removeUser","onUserSelected","map","user","onClick","App","setUsers","setSelectedUser","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c15f3dc.chunk.js","sourcesContent":["import { FormEvent, useState } from 'react'\nimport { User } from '../../type'\n\ntype Props = {\n  addUser: (user: User) => void\n  users: User[]\n}\n\nexport const UserForm: React.FC<Props> = ({ users, addUser }) => {\n  const [name, setName] = useState('')\n  const [surname, setSurname] = useState('')\n  const [email, setEmail] = useState('')\n  const [phone, setPhone] = useState('')\n\n  //на форму при натисканні кнопки додаємо нового user і скидаємо значення\n  //інпутів на ось це \"\"\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n\n    const newUser = {\n      id: users.length > 0 ? users[users.length - 1].id + 1 : 0,\n      name: name,\n      surname: surname,\n      email: email,\n      phone: phone,\n    }\n    addUser(newUser)\n    setName(\"\")\n    setSurname(\"\")\n    setEmail(\"\")\n    setPhone(\"\")\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"form\"\n    >\n      <div className=\"mb-3\">\n        <label htmlFor=\"formGroupExampleInput\" className=\"form-label\">Name:</label>\n        <input\n          className=\"form-control\"\n          id=\"formGroupExampleInput\"\n          type=\"text\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          placeholder=\"name\"\n          required\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"formGroupExampleInput1\" className=\"form-label\">Surname:</label>\n        <input\n          className=\"form-control\"\n          id=\"formGroupExampleInput1\"\n          type=\"text\"\n          value={surname}\n          onChange={(event) => setSurname(event.target.value)}\n          placeholder=\"surname\"\n          required\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"formGroupExampleInput2\" className=\"form-label\">Email:</label>\n        <input\n          className=\"form-control\"\n          id=\"formGroupExampleInput2\"\n          type=\"email\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          placeholder=\"email\"\n          required\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"formGroupExampleInput3\" className=\"form-label\">Phone:</label>\n        <input\n          className=\"form-control\"\n          id=\"formGroupExampleInput3\"\n          type=\"number\"\n          value={phone}\n          onChange={(event) => setPhone(event.target.value)}\n          placeholder=\"phone\"\n          required\n        />\n      </div>\n\n      <div className=\"form--children\">\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Save\n        </button>\n      </div>\n    </form>\n  )\n}","import React from \"react\";\nimport { User } from \"../../type\";\n\ntype Props = {\n  selectedUser: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ selectedUser }) => {\n  return (\n    <div className=\"user-info\">\n      <h6>User info:</h6>\n      <div>\n        Email:{' '}{selectedUser.email}\n        <br />\n        Phone:{' '}{selectedUser.phone}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport { User } from \"../../type\";\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  users: User[]\n  removeUser: (id: number) => void\n  onUserSelected: (user: User) => void\n  selectedUser: User | null\n};\n\nexport const UserList:React.FC<Props> = ({\n  users,\n  removeUser,\n  onUserSelected,\n  selectedUser\n  }) => {\n\n  return (\n    <div className=\"\">\n      <h3>List of users:</h3>\n      {users.map(user => (\n        <>\n          <div>User id:{' '}{user.id}</div>\n          <div>User name:{' '}{user.name}{' '}{user.surname}</div>\n\n          <div className=\"btn-group\">\n          <button\n            className=\"btn btn-danger\"\n            type=\"button\"\n            onClick={() => removeUser(user.id)}\n          >\n            Remove\n          </button>\n\n          <button\n            className=\"btn btn-success\"\n            type=\"button\"\n            onClick={() => onUserSelected(user)}\n          >\n            More info\n          </button>\n          </div>\n\n          { selectedUser && (\n            <UserInfo\n            selectedUser={selectedUser}\n          />\n          )}\n        </>\n      ))}\n    </div>\n  )\n}\n","import { useState } from 'react';\nimport { UserForm } from './components/UserForm/UserForm';\nimport { UserList } from './components/UserList/UserList';\nimport { User } from './type';\nimport './App.css';\n\nfunction App() {\n  const [users, setUsers] = useState<User[] | []>([])\n  const [selectedUser, setSelectedUser] = useState<User | null>(null)\n\n  const addUser = (newUser: User) => {\n    setUsers([...users, newUser])\n  }\n\n  const removeUser = (id: number) => {\n    setUsers([...users.filter((user) => user.id !== id)])\n  }\n\n  const selectUser = (user: User) => {\n    if (user.id !== selectedUser?.id) {\n      setSelectedUser(user)\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Number of contacts: {users.length}</h1>\n      </header>\n      <UserForm\n        users={users}\n        addUser={addUser}\n      />\n      {users.length > 0 && (\n        <div className=\"App--list\">\n          <UserList\n            users={users}\n            removeUser={removeUser}\n            onUserSelected={selectUser}\n            selectedUser={selectedUser}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}